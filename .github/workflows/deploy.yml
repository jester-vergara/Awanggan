name: Deploy Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering for terraform apply

jobs:
  plan:
    runs-on: ubuntu-latest
    name: Terraform Plan

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Terraform
      working-directory: ./aws/terraform/control-tower
      run: terraform init -reconfigure

    - name: Check Terraform Formatting
      working-directory: ./aws/terraform/control-tower
      run: terraform fmt -check -recursive

    - name: Validate Terraform
      working-directory: ./aws/terraform/control-tower
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./aws/terraform/control-tower
      run: terraform plan -var-file="../terraform.tfvars" -out=tfplan

  apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    needs: plan # This ensures apply only runs if plan was successful
    if: github.event_name == 'workflow_dispatch' # Only runs on manual trigger

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Apply Terraform Plan for Control Tower
      working-directory: ./aws/terraform/control-tower
      run: |
        terraform init
        terraform apply -var-file="../terraform.tfvars" -auto-approve "tfplan"
