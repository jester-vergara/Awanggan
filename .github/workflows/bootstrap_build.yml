name: "Terraform Bootstrap"

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  # Job 1: Control Tower
  control-tower:
    runs-on: ubuntu-latest
    name: Control Tower Account Deployment

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_CONTROL_TOWER }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: Initialize Terraform
        working-directory: ./aws/terraform/
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.S3_BUCKET }}" \
            -backend-config="key=terraform/state/${{ vars.CONTROL_TOWER_ENVIRONMENT }}/${{ vars.CONTROL_TOWER_ENVIRONMENT }}.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true" \
            -reconfigure
        
      # - name: Initialize Terraform
      #   working-directory: ./aws/terraform/
      #   run: |
      #     terraform init \
      #       -reconfigure
    
      - name: Terraform Validate
        working-directory: ./aws/terraform/
        run: terraform validate

      - name: Lint Terraform
        working-directory: ./aws/terraform/
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init
          tflint

      - name: Select Workspace
        working-directory: ./aws/terraform/
        run: |
          # Initialize Terraform to ensure backend is ready
          terraform init -input=false

          # Check if the "control_tower" workspace exists, and create it if not
          if ! terraform workspace list | grep -q "control_tower"; then
            echo "Workspace 'control_tower' does not exist. Creating it..."
            terraform workspace new control_tower
          else
            echo "Workspace 'control_tower' already exists."
          fi

          # Select the "control_tower" workspace
          terraform workspace select control_tower

      - name: Terraform Plan
        working-directory: ./aws/terraform/
        run: terraform plan -var-file="control_tower.tfvars" -out=tfplan
      
      # - name: Terraform Import
      #   working-directory: ./aws/terraform/
      #   run: |
      #     echo "Importing AWS Resources"
      #     echo " "
      #     terraform import -var-file="control_tower.tfvars" aws_organizations_organization.org[0] o-ly1bfwh8zk
      #     terraform import -var-file="control_tower.tfvars" module.s3_kms_key.aws_kms_key.kms_key "arn:aws:kms:ap-southeast-1:571600861891:key/09cd2274-112b-489e-b468-7b23008ac07a"
      #     terraform import -var-file="control_tower.tfvars" module.dynamodb_kms_key.aws_kms_key.kms_key "arn:aws:kms:ap-southeast-1:571600861891:key/22413008-c2cb-45ef-a0ac-2dc70a387fac"
      #     terraform import -var-file="control_tower.tfvars" module.s3_github.aws_s3_bucket.terraform_state "awanggan-github-bootstrap-terraform-state-bucket"
      #     terraform import -var-file="control_tower.tfvars" module.s3_github.aws_s3_bucket_versioning.terraform_state_versioning "awanggan-github-bootstrap-terraform-state-bucket"
      #     terraform import -var-file="control_tower.tfvars" module.s3_github.aws_s3_bucket_server_side_encryption_configuration.terraform_state awanggan-github-bootstrap-terraform-state-bucket
      #     terraform import -var-file="control_tower.tfvars" module.dynamodb_github.aws_dynamodb_table.this github-terraform-state-lock          

      - name: Terraform Apply
        working-directory: ./aws/terraform/
        run: |
          echo "Applying tfplan to create Control Tower resources"
          terraform apply "tfplan"
  
  # Job 2: Shared #######################################################################
  shared:
    runs-on: ubuntu-latest
    needs: control-tower
    name: Shared Account Deployment

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SHARED }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: Initialize Terraform
        working-directory: ./aws/terraform/
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.S3_BUCKET }}" \
            -backend-config="key=terraform/state/${{ vars.SHARED_ENVIRONMENT }}/${{ vars.SHARED_ENVIRONMENT }}.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true" \
            -reconfigure
        
      # - name: Initialize Terraform
      #   working-directory: ./aws/terraform/
      #   run: |
      #     terraform init \
      #       -reconfigure
    
      - name: Terraform Validate
        working-directory: ./aws/terraform/
        run: terraform validate

      - name: Lint Terraform
        working-directory: ./aws/terraform/
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init
          tflint

      - name: Select Workspace
        working-directory: ./aws/terraform/
        run: |
          # Initialize Terraform to ensure backend is ready
          terraform init -input=false

          # Check if the "shared" workspace exists, and create it if not
          if ! terraform workspace list | grep -q "shared"; then
            echo "Workspace 'shared' does not exist. Creating it..."
            terraform workspace new shared
          else
            echo "Workspace 'shared' already exists."
          fi

          # Select the "shared" workspace
          terraform workspace select shared

      - name: Terraform Plan
        working-directory: ./aws/terraform/
        run: |
          aws sts get-caller-identity --query "Account" --output text
          aws dynamodb list-tables --region ap-southeast-1
          aws iam list-roles --query "Roles[].Arn" --output table
          terraform plan -var-file="shared.tfvars" -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./aws/terraform/
        run: |
          echo "Applying tfplan to create Shared resources"
          #terraform apply "tfplan"